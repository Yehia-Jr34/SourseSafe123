To implement the **Service-Repository Pattern** in Laravel, follow these structured steps to create a clean and maintainable architecture that separates business logic from data access logic.

## Step-by-Step Implementation

### 1. Create the Model

Start by creating a model for your application. For example, if you're working with a `Post` model, you can generate it using:

```bash
php artisan make:model Post -mcr
```

This command creates a model, migration, and resource controller.

### 2. Define the Repository Interface

Create an interface for your repository that outlines the methods you will implement. This helps in defining contracts for your repository.

```php
namespace App\Repositories;

interface PostRepositoryInterface {
    public function getAll();
    public function find($id);
    public function create(array $data);
    public function update($id, array $data);
    public function delete($id);
}
```

### 3. Implement the Repository

Next, create the repository class that implements the interface. This class will contain the actual data access logic.

```php
namespace App\Repositories;

use App\Models\Post;

class PostRepository implements PostRepositoryInterface {
    public function getAll() {
        return Post::all();
    }

    public function find($id) {
        return Post::findOrFail($id);
    }

    public function create(array $data) {
        return Post::create($data);
    }

    public function update($id, array $data) {
        $post = $this->find($id);
        $post->update($data);
        return $post;
    }

    public function delete($id) {
        return Post::destroy($id);
    }
}
```

### 4. Create the Service Interface

Define a service interface that specifies the methods for business logic operations.

```php
namespace App\Services;

interface PostServiceInterface {
    public function getAllPosts();
    public function findPost($id);
    public function createPost(array $data);
    public function updatePost($id, array $data);
    public function deletePost($id);
}
```

### 5. Implement the Service

Create a service class that implements the service interface and uses the repository for data access.

```php
namespace App\Services;

use App\Repositories\PostRepositoryInterface;

class PostService implements PostServiceInterface {
    protected $postRepository;

    public function __construct(PostRepositoryInterface $postRepository) {
        $this->postRepository = $postRepository;
    }

    public function getAllPosts() {
        return $this->postRepository->getAll();
    }

    public function findPost($id) {
        return $this->postRepository->find($id);
    }

    public function createPost(array $data) {
        return $this->postRepository->create($data);
    }

    public function updatePost($id, array $data) {
        return $this->postRepository->update($id, $data);
    }

    public function deletePost($id) {
        return $this->postRepository->delete($id);
    }
}
```

### 6. Bind Interfaces to Implementations

In your `AppServiceProvider`, bind the interfaces to their respective implementations so that Laravel's service container knows which class to instantiate when an interface is requested.

```php
namespace App\Providers;

use Illuminate\Support\ServiceProvider;
use App\Repositories\PostRepositoryInterface;
use App\Repositories\PostRepository;
use App\Services\PostServiceInterface;
use App\Services\PostService;

class AppServiceProvider extends ServiceProvider {
    public function register() {
        $this->app->bind(PostRepositoryInterface::class, PostRepository::class);
        $this->app->bind(PostServiceInterface::class, PostService::class);
    }
}
```

### 7. Use in Controllers

Finally, inject the service into your controller to handle requests.

```php
namespace App\Http\Controllers;

use App\Services\PostServiceInterface;
use Illuminate\Http\Request;

class PostsController extends Controller {
    protected $postService;

    public function __construct(PostServiceInterface $postService) {
        $this->postService = $postService;
    }

    public function index() {
        return response()->json($this->postService->getAllPosts());
    }

    // Additional methods for show, store, update, and destroy...
}
```

## Conclusion

By following these steps, you will have successfully implemented the Service-Repository pattern in Laravel. This structure not only enhances code organization but also makes your application more maintainable and testable. Each layer (repository and service) has its own responsibility, leading to cleaner and more manageable code.

Citations:
[1] https://github.com/adobrovolsky97/laravel-repository-service-pattern
[2] https://dev.to/safventure11000/implement-crud-with-laravel-service-repository-pattern-1dkl
[3] https://www.twilio.com/en-us/blog/repository-pattern-in-laravel-application
[4] https://asperbrothers.com/blog/implement-repository-pattern-in-laravel/
[5] https://stackoverflow.com/questions/76724088/laravel-ddd-pattern-repository-and-service
[6] https://www.youtube.com/watch?v=M_0LV4iO3ng
[7] https://laraveldaily.com/lesson/design-patterns/repository-pattern
[8] https://www.reddit.com/r/laravel/comments/1drgb7k/mastering_the_servicerepository_pattern_in_laravel/
